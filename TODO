TODO

General
	better pretty-print
		show as octopus parses, not as haskell does
		apply judicious indentation
	serialize values, even mutable cells and the current program state
	consider putting types into the grammar, unchecked of course

Parser
	mutual letrec
	distfixes
		interpret config
		apply
	literate files
	docstrings
	decorators in do blocks
	infix index functions :[e] :[e: f]
	indentation sensitivity
		cleanup & further testing
		turn it off with a directive
	special syntax for lambda and vau
		use the primitive ones, allow for stuff like (\l (x y z) body)
		nah, I can do this in userland

Interpreter
	Data primitives
		channels
		conversions
	First-class control
		guards (onWind, onUnwind, onAbort)
		caputure (cannot propagate past ImptK)
		Ks is an applicative
	concurrency
		spawn :: `* -> killer #({} -> Bool)
		when a thread is killed while importing, I'll need to let another thread try the import again, even if there are already threads waiting on it
		BUGFIX: tags are created local to a thread, either:
			make the tag generator thread-global
			attach a threadid to the tag (assuming tids are not reused)
	directives
	offer a way to force import despite caching
	pass arbitrary flags to interpreter (like -D in gcc), look them up at runtime
	an interpreter maker, configured in a Haskell program `(perfile, repl) = octi someConfig`
		actual C and JS FFIs
	REPL
	ffi
	version specifier in import string (could be done in userland)
	re-raise exceptions?
		perhaps by keeping the last unwond stack around until a handler returns normally
		on re-raise, we simply cat the stacks
		alternately, do it as a library

Documentation
	geting started
	definition
	Octopus for (JS, OOlang, Lisp, ...) Programmers
	every primitive type and operation: what they do and when/how they fail

Cleanup
	systematize the parser
	break functionality into hexpr
	eliminate magic field names

Tooling
	build in unicoder
	editor configs (Sublime, vim, emacs, yi, ...)
	grotto (virtualenv)
	Packaging
		may as well design it general:
		the package metadata should describe the target language
		that way, I can use the same protocols for Octopus, Murex and Nautilus
	lint/runtime warnings:
		detect no parenthesis on a multi-expression do line (statement or expression)
		possible misspellings (rough analysis of do blocks, especially note similar spellings)
		unsafe filenames (target the lowest common denominator)
		malformed type names (these should have a standard form, like /\w+(\.\s+)*/)
		warn about rebinding double-underscore symbols
		warn about use of tabs
		same name defined twice in a file/do block
	When you run the interpreter, allow for hooks.
		Say you do `octopus "somefile.oct"`, then we should look up from configuration a list of commands to run when a file is provided. The is given to these commands and each command is run. If all the commands succeed, then we send the file (which many have been modified, say by unicoder) into the interpreter.
	Perform imports statically (may require an import keyword)

Performance
	Floating point primitive type
	Extended data primitves
	Applicative closures?
	try using `Rose (Map Symbol (Maybe Val))` for objects to reduce space consumption
		The maybe val is there so that a lookup can return (Just Nothing), which is equivalent to (Nothing)

Standard libraries
	os interface
	first-class patterns
	translate type errors: catch a type error underneath, then throw a new type error with a new origin
	simulate (parametric) modules (thereby typeclasses minus ad hoc)
	monads (including monadic IO)
	structured data
		html
		annotated sexpr protocol (generalizing html/xml)
		metadata protocol
		d3-style joins
	parsers (glob, regular, context-free, CFG+static alloc'd storage, combinator)
	servers
		conduits
		string builders
		sockets
		databases
	stm
	mutable objects/smalltalk


