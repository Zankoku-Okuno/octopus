TODO

General
	documentation
		geting started
		definition
	first-class patterns
	abstract types?
		could have special wrapper/unwrapper primitives so you can't subvert the abstraction through introspection
	better pretty-print
		show as octopus parses, not as haskell does
		apply judicious indentation

Parser
	distfixes
	infix dot
	infix colon?
		but then what about a bare accessor function? at-sign?
	ellipsis?

Interpreter
	Import primitive:
		read/parse/eval file, returns result of evaluation (which of course is the env at the end of the file)
		don't forget to memoize these so import is idempotent
	Data primitives
		numbers
		bytes
		text
		fileps
		symbols
		tags
		sequences
		reference cells
		arrays
		handlers
		continuations
	Extended data primitves?

Cleanup
	put Shortcuts in Octopus.Data
	eliminate magic field names

Performance
	try using `Rose (Map Symbol (Maybe Val))` for objects to reduce space consumption
		The maybe val is there so that a lookup can return (Just Nothing), which is equivalent to (Nothing)