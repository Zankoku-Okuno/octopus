Rationale
=========

I make no stupid compromises in the design of my languages. Here are some things about Octopus that might seem weird at first if you're coming from other languages. Rest assured, there is a good reason for all of these.

Is anything even possible with immutability?
--------------------------------------------

With mutable data, you are always questioning who has references to what. It's a complicated question and when (not if) you get it wrong, that's a data corruption bug. Data corruption is like memory corruption, except when you screw up, the program doesn't just crash, it keeps going further down the wrong route until maybe it's eventually detected, after its already screwed up everything else. Data corruption is not fun to debug.

Luckily, immutable data is immune to data corruption by definition. Even better, most problems only need immutable data. With Octopus (like Clojure and Haskell) you'll find your brain freed from the overhead of ownership questions, ready to do more real work. Once it clicks, default immutable data easily cuts debuging time by an order of magnitude.

That said, sometimes mutation is the way to go, and Octopus does have mutable reference cells. Like C pointers, you need to do extra typing to use them: explicitly dereferencing values from their cells and using a special assignment operator. Every time you use mutation, you're alerted to the possibility of data corruption, and the need to encapsulate that mutation under a nice, immutable interface. Just that extra bit of syntax makes it easy to see and think about what's really going on.

I sure wish there were a type checker...
----------------------------------------

When you can make arbitrary changes to environments at runtime, there's no such thing as a static type checker. Well, it might be possible with refinement types, but those are weird and probably still need checking at runtime. Static types are a feature, and I'd like ot have them in Octopus, but the language is just too dynamic to let it fly.

That said, there's nothing stopping you from typeful programming. In fact, we place a lot of emphasis on always documenting the types of your code, and we have a pseudo-syntax for doing this clearly. Since there's no automatic checking, we recommend using contracts as early as possible. It's not perfect, but it's something.

Can't I have varargs?
---------------------

Octopus is curried, which means that every function takes exactly one argument. Every. Single. Function. There never reason to question how many arguments a function takes; the answer is one.

That being said, varargs are easy: pass a list. Want arbitrary keyword arguments? Pass an object.

The alternative is to have special treatment of varargs and varkwargs. The argument list is a well-known wart in Javascript. In C, varargs are easy to define, but hard to use. In Python, passing varargs and varkwargs around needs special syntax. Eliminating varargs and varkwargs means you use regular data to simulate them, which means they are as easy to use as regular data.

Dude, where's my stack trace?
-----------------------------

Implementations of Octopus are required to be properly tail-recursive. Since there is no primitive iteration construct, we simulate iteration with appropriate tail-recursive function calls. With proper tail-recursion, this simulation in fact has the same performance characteristics as iteration.

I have heard the argument that proper tail-recursion is bad because the stack trace can give an incomplete picture of how you got to a certain point.

  * Not all the information about how you got to a certain point is included in the trace.
  * The trace is not for telling you how you got to a point.
  * Debuggers can help you find out how a certain point was reached.
  * The trace only tells the machine what else it has left to do.

If you code a loop in an imperative language, you don't get to see all the previous values of the iteration variable. This isn't a problem in practice. Tail recursion in functional languages is the same phenomenon. If a bug escapes the stack, as they eventually will, the debugger is the way to go.

Where have the macros gone?
---------------------------

Lisp macros are unhygenic. Scheme macros are their own, separate language. Neither is terribly fun. In Lisp, I always worry that I'm accidently capturing the user's variable, and I never took the time to learn Macro-Scheme once I knew Scheme. Octopus has vau, eval, and first-class environments.

You decide when and where code gets evaluated, in the very same language the code is written in. This, not macros, is the real benefit of code-as-data/data-as-code. If you want macros, even quasiquotation, it's not to hard to implement them yourself, but Aater enough time with vau, I doubt you'll bother. Vau can do everything macros can do, and more, and are hygenic by default (but can be unhygenic exaclty when and how you want).

What happened to contextual equivalence?
----------------------------------------

I saw this list of problems [somewhere](http://www.eighty-twenty.org/index.cgi/tech/scheme/fexprs-remain-inscrutable-20110929.html), and I have responses for them.

  * Compilation, automatic refactoring, and cross-referencing impossible in general.
  * Contextual equivalence is too fine.

Static stuff (compilation, automatic refactoring, optimizations) is _hard_, but then Octopus is an unashamedly dynamic language. I don't care about static analysis.

As far as contextual equivalence, his practical example is really just a typing issue. Sure, Octopus is unityped, but that doesn't stop humans from reading types into the code. Yes, `(λ f (f (3 + 4)))` and `(λ f (f (4 + 3)))` are not equivalent when you pass an operative for `f`. 
There's another "problem" where two different implementations of foldr either allows the passed combiner to control the recursion or else controls the recursion itself. While the author considered this an implementation detail, I would consider it a matter of strictness, which is definitely part of the implementation.

In both these cases, the user's problems are solved simply by examining the documentation, which should specify a type. Type in Octopus are unchecked (see type checker), but they can be very descriptive nonetheless. In the first example, simply specify that the argument `f` should be an applicative. If the user abides the constraints, we retrive equivalence. For the foldr example, stipluate strictness (it's a pity most programming languages don't have a way to express strictness in their type system).




