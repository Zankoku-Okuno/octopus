### These are the operators of the vau and lambda calculi. ###
vau :: One-argument vau.
vau: #<vau> [[{}, var], #<vau> [[static, body],
         #<vau> [arg, do arg': #<match> [var, arg];
                         env': #<extends> [arg', static];
                         #<eval> [env', body];]
      ]];

λ :: One-argument lambda.
λ: vau [{}, var] (vau [static, body]
      (vau arg
         do arg': #<eval> arg;
            env': #<extends> [#<match> [var, arg'], static];
            #<eval> [env', body];));

let: __let__;
Y: λ f
      do maker: λ x (f (λ arg (x x arg)));
         maker maker;;


# ### These are necessary for syntactic sugar. ###
__lambda__: λ;
__Y__: Y;
__quote__: vau [{}, ast] ast;

__get__: vau [{}, field] (λ x (#<get> [x, field]));

__modify__: vau [{}, field] (λ f (λ x
               (#<extends> [#<match> [field, f (#<get> [x, field])], x])));


# ### And now the basic control operators ###
handle :: Tg → (a → r) → r
handle: λ mark (λ handler (vau body
         (#<handle> [mark, handler, `(#<eval> body)])));

raise :: Tg → a → *
raise: λ mark (λ report
         (#<raise> [mark, report]));


# ### These are just prettier ways of getting at important primitives. ###
eval :: Env → * → *
eval: λ env (λ ast (#<eval> [env, ast]));

match :: Pat → * → Env
match: λ var (λ val (#<match> [var, val]));

with :: Env → Env → Env
with ::<<
   Extends and overrides the first environment with bindings from the second.
>>
with: λ base (λ new (#<extends> [new, base]));


